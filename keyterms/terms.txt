1. Assertion Library (chai) = tools that we use to verify that our code is running properly.

2. Test Framework (mocha) = tool that provides the basis of test automation and simplifies the automation effort. In contrast to a library,
                            test framework takes your code and provides the testing result.

3. Test Runner = scripts that we provide to run our test suites.

4. Library vs. Framework = The key difference between a library and a framework is "Inversion of Control".
                           When calling a method from a library, you are in control. But with a framework,
                           the control is inverted. The framework calls your code.

5. Deep vs. Shallow Equality = Deep equality is the equality of values, or 2 references that point to objects that have the same value.
                               Shallow equality is the equality of references, or two references that point to the same object.

6. Unit Testing = Testing that runs code over a segment of your program checking the input and output.
                  This ensures that individual components of the app work as expected.

7. Integration Testing = Testing that ensures that component collaborations work as expected. They test
                         component API, UI, or side-effects (such as database I/O, logging, etc).

8. TDD (Test-Driven Development) = software development process  where you write tests before you write application code.

9. Late Binding = computer programming mechanism in which the method being called upon an object is looked up by name at runtime.

10. Encryption = the process of converting information like passwords or other classified information into algorithmic code to prevent unauthorized access.

11. Brute Force Attack = trial-and-error method used to obtain information such as a user password or personal identification number (PIN).
                        In brute force attack, automated software is used to generate a large number of consecutive guesses as to the value of the desired data.

12. Transport Layer Security (TLS) = Cryptographic protocols that provide communications security over a computer network in a way designed to prevent eavesdropping and tampering.
                                     Also provides privacy and data integrity between 2 communicating applications. It is the successor of SSL. If you go into a website that says "https", then it means that there's end-to-end security between the user agent and the web server.

13. Man-in-the-middle Attack = An attack where the attacker secretly relays and possible alters the communication between 2 parties who believe they are directly communicating with each other. A man acts as a middle man who communicates with both parties while both parties are not talking directly to each other.

14. Authentication vs. Authorization = Authentication is the process of verifying who you are. Authorization is the process of verifying that you have access to certain features or information.

15. Partial Application = The process of fixing a number of arguments to a function, producing another function of smaller arity. Arity refers to the number of arguments a function can accept.
                          Partial application also means taking a function and partially applying it to one or more arguments, but not all, creating a new function in the process.

16. Lazy Initialization = The tactic of delaying the creation of an object, the calculation of a value, or some other expensive process unit the first it is needed.

17. Dependency Injection = Technique whereby one object supplies the dependencies of another object (modules in Node.js). Makes it easier for unit testing and maintaining code. I'm writing some code that need some parameters, but I don't know where these parameters are coming from but I'm writing it anyway.

18. Loose Coupling = An approach to interconnecting the components in a system or network so that those components, also called elements, depend on each other to the least extent practicable.
                     It also means reducing dependencies of a class that use a different class directly, promoting greater reusability and easier maintainability.
                     Loose coupling in programming is a design goal that seeks to reduce the inter-dependencies between components of a system with the goal of reducing the risk that changes in one component will require changes in other component.
